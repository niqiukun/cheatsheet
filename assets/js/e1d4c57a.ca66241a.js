"use strict";(self.webpackChunkcheatsheet=self.webpackChunkcheatsheet||[]).push([[1727],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,i(i({ref:n},c),{},{components:t})):a.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},i="Go",l={unversionedId:"Toolbox/Languages/Go",id:"Toolbox/Languages/Go",title:"Go",description:"Basics",source:"@site/docs/Toolbox/Languages/Go.md",sourceDirName:"Toolbox/Languages",slug:"/Toolbox/Languages/Go",permalink:"/cheatsheet/docs/Toolbox/Languages/Go",draft:!1,editUrl:"https://github.com/niqiukun/cheatsheet/blob/master/docs/Toolbox/Languages/Go.md",tags:[],version:"current",frontMatter:{},sidebar:"toolboxSidebar",previous:{title:"CSS",permalink:"/cheatsheet/docs/Toolbox/Languages/CSS"},next:{title:"HTML",permalink:"/cheatsheet/docs/Toolbox/Languages/HTML"}},s={},p=[{value:"Basics",id:"basics",level:2},{value:"Variables",id:"variables",level:3},{value:"Constants",id:"constants",level:4},{value:"Functions",id:"functions",level:3},{value:"Flow Control",id:"flow-control",level:3},{value:"Loop",id:"loop",level:4},{value:"Conditional",id:"conditional",level:4},{value:"Defer",id:"defer",level:4},{value:"Pointers",id:"pointers",level:3}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"go"},"Go"),(0,r.kt)("h2",{id:"basics"},"Basics"),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Variables are declared with ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," or ",(0,r.kt)("inlineCode",{parentName:"p"},":="),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var a = 1\nvar b, c, d = 2, 3, 4 // multiple variables\n\n// alternatively\na := 1\nb, c, d := 2, 3, 4    // multiple variables\n\n// default initialization with types\nvar i int    // i == 0\nvar b bool   // b == false\nvar s string // s == ""\n')),(0,r.kt)("p",null,"The variable type is inferred from the value when the type is not explicitly specified during declaration. The basic types in Go are ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"intXX"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"uint")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"uintXX"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"floatXX"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"complexXX"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"byte"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rune"),". Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://go.dev/tour/basics/11"},"the list here"),"."),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," type in Go use double quotes (",(0,r.kt)("inlineCode",{parentName:"p"},'""'),")."),(0,r.kt)("h4",{id:"constants"},"Constants"),(0,r.kt)("p",null,"Constants are declared with ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const Pi = 3.14\n\n// multiple constants\nconst (\n  Big = 1 << 100\n  Small = Big >> 99\n)\n")),(0,r.kt)("p",null,"Types of constants are applied when the constants are actually assigned to variables, or used as function parameters. Hence, constants can represent more precisely than the basic types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// error-start\nvar big = Big\n"cannot use Big (untyped int constant 1267650600228229401496703205376) as int value in variable declaration (overflows)"\n// error-end\n')),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Here is a basic function in Go:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func add(x int, y int) int {\n  return x + y\n}\n")),(0,r.kt)("p",null,"Note that you must have return types for functions. Functions without return types are void functions that do not return values."),(0,r.kt)("p",null,"Some other special things about functions in Go:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// merging params of the same type\nfunc swap(x, y int) (int, int) {\n  // return multiple values\n  return y, x\n}\n\n// or named returns\nfunc swap(x, y int) (a int, b int) {\n  a = y\n  b = x\n  return\n}\n")),(0,r.kt)("h3",{id:"flow-control"},"Flow Control"),(0,r.kt)("h4",{id:"loop"},"Loop"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"for")," is the only looping construct in Go."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for i := 0; i < 10; i++ {\n  fmt.Println(i)\n}\n")),(0,r.kt)("p",null,'Omit initialization and increment to construct a "while" loop:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"i := 0\nfor i < 10 {\n  fmt.Println(i)\n  i += 1\n}\n")),(0,r.kt)("h4",{id:"conditional"},"Conditional"),(0,r.kt)("p",null,"Here is a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'if true {\n  fmt.Println("Hello world!")\n}\n')),(0,r.kt)("p",null,"You can declare a variable prior to specifying the condition, the variable will be available throughout the scope of the ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'if result := operation(); result <= threshold {\n  fmt.Printf("Result is %d, not exceeding threshold\\n", result)\n} else {\n  fmt.Printf("Result is %d, exceeding threshold\\n", result)\n}\n')),(0,r.kt)("p",null,"Another conditional is the ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," statement. While the syntax is like other languages, ",(0,r.kt)("inlineCode",{parentName:"p"},"break")," statements are provided automatically for each case. Also, switch need not to be on a variable: hence it can be used to replace long if else statements."),(0,r.kt)("h4",{id:"defer"},"Defer"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"defer")," is to specify functions to execute after the outer function returns, with the currently evaluated parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  answer := 0\n  defer fmt.Println(answer)\n  answer = 42\n  fmt.Print("The answer to everything is: ")\n}\n// The answer to everything is: 0\n')),(0,r.kt)("p",null,"Deferred functions are pushed to a stack and executed in last-in-first-out order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  defer fmt.Println()\n  for i := 0; i < 3; i++ {\n    defer fmt.Printf("%d ", i)\n  }\n}\n// 2 1 0\n')),(0,r.kt)("h3",{id:"pointers"},"Pointers"))}u.isMDXComponent=!0}}]);