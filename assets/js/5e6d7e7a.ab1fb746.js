"use strict";(self.webpackChunkcheatsheet=self.webpackChunkcheatsheet||[]).push([[8267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={},i="React",l={unversionedId:"Toolbox/Frontend/React",id:"Toolbox/Frontend/React",title:"React",description:"Basics",source:"@site/docs/Toolbox/Frontend/React.md",sourceDirName:"Toolbox/Frontend",slug:"/Toolbox/Frontend/React",permalink:"/cheatsheet/docs/Toolbox/Frontend/React",draft:!1,editUrl:"https://github.com/niqiukun/cheatsheet/blob/master/docs/Toolbox/Frontend/React.md",tags:[],version:"current",frontMatter:{},sidebar:"toolboxSidebar",next:{title:"CSS",permalink:"/cheatsheet/docs/Toolbox/Languages/CSS"}},s={},c=[{value:"Basics",id:"basics",level:2},{value:"Functional Component",id:"functional-component",level:3},{value:"Hooks",id:"hooks",level:2},{value:"<code>useState</code>",id:"usestate",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"react"},"React"),(0,a.kt)("h2",{id:"basics"},"Basics"),(0,a.kt)("p",null,"To understand React, let's start with a really basic React example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(<p>Hello world!</p>);\n")),(0,a.kt)("p",null,"While it seems like black magic that you can write HTML like mark-up in JavaScript, it actually does not work out of the box and has to be transpiled by compilers into plain JavaScript. It means that we can also achieve the same using the underlying JavaScript implementation, without the help of compilers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"root.render(\n  React.createElement('p', null, 'Hello world!');\n);\n")),(0,a.kt)("p",null,"For simplicity, in this document we will just use JSX elements instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"createElement"),"."),(0,a.kt)("h3",{id:"functional-component"},"Functional Component"),(0,a.kt)("p",null,"As the application grows big, it would be great not to write everything inside ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),". Hence, we can encapsulate individual components by separating them into functions that returns the respective React element."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function Component() {\n  return <p>Hello world!</p>;\n}\n\nroot.render(<Component />);\n")),(0,a.kt)("p",null,"This is equivalent to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function Component() {\n  return React.createElement('p', null, 'Hello world!');\n}\n\nroot.render(Component());\n")),(0,a.kt)("h2",{id:"hooks"},"Hooks"),(0,a.kt)("p",null,"In a web application, it would be great if components can have their own internal states to keep track of things for display. However, it used to be challenging because functions are typically stateless: you give an input, and they produce an output based on your input. There is no difference in terms of output if you call a function many times with the same input."),(0,a.kt)("p",null,"However, things changed with the introduction of hooks: they not only allow functional components to have their own internal states, but also provide other features that make functional components as powerful as class components."),(0,a.kt)("h3",{id:"usestate"},(0,a.kt)("inlineCode",{parentName:"h3"},"useState")),(0,a.kt)("p",null,"Here we have a simple example that makes use of ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Component() {\n  const [counter, setCounter] = React.useState(0);\n  return (\n    <>\n      <div>The count is: {counter}</div>\n      <button onClick={() => setCounter(counter + 1)}>Click me!</button>\n    </>\n  );\n}\n")),(0,a.kt)("p",null,"Each time the counter changes, there is a rerender. However, the component does keep the count as an internal state and increment it properly. How is that possible?"),(0,a.kt)("p",null,"First of all, for all React hooks, internally they call the respective hook functions on a dispatcher from a singleton module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="packages\\react\\src\\ReactHooks.js"',title:'"packages\\react\\src\\ReactHooks.js"'},"import ReactCurrentDispatcher from './ReactCurrentDispatcher';\n\nexport function useState(initialState) {\n  const dispatcher = ReactCurrentDispatcher.current;\n  return dispatcher.useState(initialState);\n}\n")),(0,a.kt)("p",null,"There are two separate instances of the dispatcher, ",(0,a.kt)("inlineCode",{parentName:"p"},"HooksDispatcherOnMount")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"HooksDispatcherOnUpdate"),", that exhibits different behavior depending on the status of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/acdlite/react-fiber-architecture"},"React Fiber"),". When Fiber is not initialized yet, hooks will be called on ",(0,a.kt)("inlineCode",{parentName:"p"},"HooksDispatcherOnMount"),", and otherwise on ",(0,a.kt)("inlineCode",{parentName:"p"},"HooksDispatcherOnUpdate"),". (Let's skip rerender for now.)"),(0,a.kt)("p",null,"Let's first take a look at how ",(0,a.kt)("inlineCode",{parentName:"p"},"setState")," is set up on mount:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function mountState(initialState) {\n  const hook = mountWorkInProgressHook(); // what magic is happening here?\n  if (typeof initialState === 'function') {\n    initialState = initialState(); // initialState may be an initializer\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState,\n  };\n  hook.queue = queue;\n  const dispatch = (queue.dispatch = dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue\n  ));\n  return [hook.memoizedState, dispatch];\n}\n")),(0,a.kt)("p",null,"The key to setting up an internal state seems to be ",(0,a.kt)("inlineCode",{parentName:"p"},"mountWorkInProgressHook"),". Again, let's take a sneak peak inside:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// add a new hook to the linked list\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null, // actual state returned, set to initial state\n\n    baseState: null, // set to initial state\n    baseQueue: null,\n    queue: null,\n\n    next: null, // pointer to the next hook\n  };\n\n  // workInProgressHook is a pointer to the tail of a linked list of hooks\n  if (workInProgressHook === null) {\n    // initialize the linked list\n    workInProgressHook = hook;\n    currentlyRenderingFiber.memoizedState = workInProgressHook; // head of the linked list\n  } else {\n    // append to the linked list\n    workInProgressHook.next = hook;\n    workInProgressHook = workInProgressHook.next; // move tail of the linked list\n  }\n  return workInProgressHook;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function dispatchSetState(\n  fiber, // currentlyRenderingFiber\n  queue, // hook.queue\n  action // param of setState\n) {\n  const lane = requestUpdateLane(fiber);\n\n  const update = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null,\n  };\n\n  const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n    entangleTransitionUpdate(root, queue, lane);\n  }\n}\n")))}p.isMDXComponent=!0}}]);